
%skeleton "lalr1.cc" /* -*- C++ -*- */
%require "3.0"
%defines
%define parser_class_name {fol_parser}
%code requires {
#include <string>

#include "fol.hpp"

using namespace std;

class fol_reader;
}
// The parsing context.
%parse-param { fol_reader& reader }
%lex-param   { fol_reader& reader }
%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &reader.getFilename();
};
%debug
%error-verbose
// Symbols.
%union
{
    string        *sval;
    Term          *tval;
    Function      *fval;
    Predicate     *pval;
    vector<Term*> *tl_val;
};
%code {
#include "fol-reader.hpp"
}

%token        END      0 "end of file"
%token <sval> CONSTANT   "constant"
%token <sval> VARIABLE   "variable"

%type <tval>   term
%type <fval>   function
%type <tl_val> term_list
%type <pval>   atomic_sentence


%destructor { delete $$; } "constant"
%destructor { delete $$; } "variable"

%destructor { delete $$; } term
%destructor { delete $$; } atomic_sentence

%printer    { yyoutput << *$$; } "constant"
%printer    { yyoutput << *$$; } "variable"

%%

%start kb_file;

kb_file:
      atomic_sentence { reader.setPredicate($1); }
    ;

atomic_sentence:
      CONSTANT '(' term_list ')' { $$ = new Predicate(*$1, *$3); delete $3; }
    ;

term_list:
      term_list ',' term  { $1->push_back($3); $$ = $1; }
    | term                { $$ = new vector<Term*>(); $$->push_back($1); }
    ;

term:
      function { $$ = $1; }
    | CONSTANT { $$ = new Constant(*$1); }
    | VARIABLE { $$ = new Variable(*$1); }
    ;

function:
    CONSTANT '(' term_list ')' { $$ = new Function(*$1, *$3); delete $3; }
    ;

%%

void yy::fol_parser::error(const yy::fol_parser::location_type& l, const string& m) {
  reader.error (l, m);
}
